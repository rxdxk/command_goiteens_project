from aiogram import types,Router,F
from aiogram.filters.command import Command, CommandObject
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from keyboards import reg_kb
from loader import dp, R

R = Router()

dp.include_router(R)

class Form(StatesGroup):
    name = State()
    surname = State()
    phone = State()


@dp.message(F.text == "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è")
async def reg_func(message: types.Message):
    await message.answer("–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏ ?",reply_markup=types.ReplyKeyboardRemove())

@R.message(Command("start"))
async def start_func(message: types.Message, state: FSMContext):
    await message.answer("–í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ —É –±–æ—Ç—ñ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ—Å—å–∫–æ—óüá¨üáß")
    await message.answer("–©–æ–± –ø–æ—á–∞—Ç–∏ —Ç–æ–±—ñ —Ç—Ä–µ–±–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å(–Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É)üèÅ",reply_markup=reg_kb)
    await state.set_state(Form.name)

@R.message(Form.name)
async def name_func(message: types.Message, state: FSMContext):
    global name
    name = message.text
    if len(name) < 12 and name.isalpha():
        await message.answer(f"Hello {name}")
        await state.set_state(Form.surname)
        await message.answer(f"{name}, –≤–≤–µ–¥–∏ —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ")
    else:
        await state.set_state(Form.name)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è")
@R.message(Form.surname)

async def surname_func(message: types.Message, state: FSMContext):
    global surname
    surname = message.text
    if len(surname) < 20 and surname.isalpha():
        await state.set_state(Form.phone)
        await message.answer(f"–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É ,–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ +38")
        
    else:
        await state.set_state(Form.surname)
        await message.answer(f"–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ")
        

@R.message(Form.phone)
async def phone_func(message: types.Message, state: FSMContext, command : CommandObject):
    global phone
    phone = message.text

    if len(phone) == 10 and phone.isnumeric():
        await message.answer("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        await message.answer("–¢–∏ –≤–∂–µ –ø–æ—á–∞–≤ —Å–≤—ñ–π —Ä—É—Ö —ñ —Å–∫–æ—Ä–æ —Ç–∏ –±—É–¥–µ—à –≥–æ–≤–æ—Ä–∏—Ç–∏ –∞–Ω–≥–ª—ñ—Å—å–∫–æ—é —è–∫ –≤—ñ–Ω:")

    else:
        await state.set_state(Form.phone)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä")
