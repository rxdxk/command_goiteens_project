from aiogram import types,Router,F
from aiogram.filters.command import Command, CommandObject
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from db_api.db_users import *
from loader import dp, R, db_users
from .translator import translate_eng as eng
from .translator import translate_ukr as ukr
from .tests import *
from .keyboards import *
from .learn import *
from .states import *
import random

class Form(StatesGroup):
    name = State()
    surname = State()
    phone = State()

class transl(StatesGroup):
    choose = State()
    eng = State()
    ukr = State()
    eng_answer = State()
    ukr_answer = State()
        
lvls = {"a1":questions_a1,
        "a2":questions_a2,
        "b1":questions_b1,
        "b2":questions_b2,
        "c1":questions_c1,
        "c2":questions_c2}

eng_levels = ["A1","A2","B1","B2","C1","C2"]

def dynamic_reply_kb(options: list):
    return types.ReplyKeyboardMarkup(
        keyboard = [
            [types.KeyboardButton(text=option) for option in options] 
        ], resize_keyboard=True
    )

def question_generator(prev_number,curr_number, state_name, next_state,test_name):
    @dp.message(state_name, F.text.in_(test_name[prev_number]['options']))
    async def questiongen(message: types.Message, state: FSMContext):
        our_data = await state.get_data()
        print(message.text)
        right_ans = test_name[prev_number]["answer"]
        if message.text == right_ans:
            await state.update_data(
                {
                    "score":our_data['score'] + test_name[prev_number]["point"],
                    "name":test_name[3]['answer']
                }
            
            )
        our_data = await state.get_data()
        print(our_data)
        print(f"1111111111111:{our_data['score']}")
        await message.answer(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∞")
        await message.answer(f"–¢–∏ –≤—ñ–¥–ø–æ–≤—ñ–≤:{message.text}")
        await message.answer(f"–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:{right_ans}")
        await message.answer(f"{curr_number} –ü–∏—Ç–∞–Ω–Ω—è:")
        await message.answer(test_name[curr_number]["question"], reply_markup=dynamic_reply_kb(test_name[curr_number]["options"]))
        await state.set_state(next_state)
def init_questions():
    question_generator(1, 2, ST.q2, ST.q3,questions_start)
    question_generator(1, 2, ST.q2, ST.q3,questions_start)
    question_generator(2, 3, ST.q3, ST.q4,questions_start)
    question_generator(3, 4, ST.q4, ST.q5,questions_start)
    question_generator(4, 5, ST.q5, ST.q6,questions_start)
    question_generator(5, 6, ST.q6, ST.final,questions_start)
    for x in lvls.values():
        question_generator(1,2, AT.q2, AT.q3,x)
        question_generator(2,3, AT.q3, AT.final,x)

@dp.message(ST.final)
async def final_score(message: types.Message, state: FSMContext):
    telegram_user_id = message.from_user.id
    our_data = await state.get_data()
    right_ans = questions_start[6]["answer"]
    if message.text == right_ans:
        await message.answer(f"–¢–∏ –≤—ñ–¥–ø–æ–≤—ñ–≤:{message.text}")
        await message.answer(f"‚úÖ–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:{right_ans}")
        our_data['score'] += 1
    print(our_data)
    score = our_data['score']
    await message.answer("–î–∞–≤–∞–π –ø—ñ–¥—Ä–∞—Ö—É—î–º–æ —Ç–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏üìù",reply_markup=types.ReplyKeyboardRemove())
    eng_levels.insert(0,"A0")
    for x in range(len(eng_levels)):
        if score == x:
            await message.answer(eng_levels[x])
            lvl = eng_levels[x]
            db_users.update_lvl(telegram_user_id=telegram_user_id, lvl=lvl)
        await state.clear()
    eng_levels.pop(0)
    await state.set_state(TC.ch)
    await state.update_data(score=0)
    await message.answer("üìã–î–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞ /info")
    await message.answer("üìö–û—Å—å –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ —Ç–µ—Å—Ç—ñ–≤",reply_markup=dynamic_reply_kb(eng_levels))

@dp.message(AT.final)
async def final_score(message: types.Message, state: FSMContext):
    our_data = await state.get_data()
    print(our_data)
    right_ans = our_data["name"]
    if message.text == right_ans:
        await message.answer(f"–¢–∏ –≤—ñ–¥–ø–æ–≤—ñ–≤:{message.text}")
        await message.answer(f"‚úÖ–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:{right_ans}")
        our_data['score'] += 1
    score = our_data['score']

    await message.answer("–î–∞–≤–∞–π –ø—ñ–¥—Ä–∞—Ö—É—î–º–æ —Ç–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏",reply_markup=types.ReplyKeyboardRemove())
    await message.answer(f"–¢–∏ –Ω–∞–±—Ä–∞–≤ {score} –∑ 3")
    await state.set_state(TC.ch)
    await state.update_data(score=0)
    await message.answer("–û—Å—å –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ —Ç–µ—Å—Ç—ñ–≤",reply_markup=dynamic_reply_kb(eng_levels))

def format_user_info_string(user_info: tuple):
        return f"""
    <b>
üë®First Name: {user_info[1]}
üë®Last Name: {user_info[2]}
üÜîTelegram ID: {user_info[3]}
‚òéÔ∏èPhone Number: +380{user_info[4]}
üá¨üáßEnglish Level: {user_info[5]}
    </b>
    """

@dp.message(Command("info"))
async def info_func(message: types.Message):
    await message.answer('''<b>–©–æ –º–æ–∂–µ —Ü–µ–π –±–æ—Ç‚ùì</b>
    <i>-–í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—óüá¨üáß
    -–î–æ–ø–æ–º–æ–≥—Ç–∏ –ø—Ä–æ–∫–∞—á–∞—Ç–∏ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—èüß†
    -–î–∞–≤–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –≤–∏–≤—á–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Å–ª—ñ–≤ —Ç–∞ –ø—Ä–∞–≤–∏–ªü§î
    -–î–∞–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—èüßë‚Äçüíª
    -–î–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å —ñ–∑ –∫–æ—Ä–∏—Å—Ç—éüïì</i>
    ''')

@dp.message(Command("myprogress"))
async def progres_func(message: types.Message):
    telegram_user_id = message.from_user.id
    user_info = db_users.get_user_by_telegram_id(telegram_user_id)
    print(user_info)
    if user_info:
        await message.reply(format_user_info_string(user_info))
    else:
        await message.reply(f"User with your ID: <b>{telegram_user_id}</b> is not registredü§∑")

@dp.message(Command("deleteme"))
async def delete_func(message: types.Message):
    telegram_user_id = message.from_user.id
    db_users.delete_user(telegram_user_id)
    await message.answer("‚ùå–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ")

@dp.message(Command("updateme"))
async def delete_func(message: types.Message, state: FSMContext):
    await message.answer("üîÑ–î–∞–≤–∞–π—Ç–µ –æ–Ω–æ–≤–∏–º–æ –≤–∞—à—ñ –¥–∞–Ω–Ω—ñ, –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è")
    await state.set_state(update.name)

@dp.message(update.name)
async def surname_func(message: types.Message, state: FSMContext):
    name = message.text
    if len(name) < 12  and len(name) >= 3 and name.isalpha():
        await message.answer(f"üôãHello {name}")
        await state.update_data(name=name)
        await state.set_state(update.surname)
        await message.answer(f"{name}, –≤–≤–µ–¥–∏ —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ")
    else:
        await state.set_state(update.name)
        await message.answer("‚ùå–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è")
    
@dp.message(update.surname)
async def surname_func(message: types.Message, state: FSMContext):
    surname = message.text
    if len(surname) < 20  and surname.isalpha():
        await state.update_data(surname=surname)
        await state.set_state(update.phone)
        await message.answer(f"‚òéÔ∏è–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É ,–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ +38")   
    else:
        await state.set_state(update.surname)
        await message.answer(f"‚ùå–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ")

@dp.message(update.phone)
async def phone_func(message: types.Message, state: FSMContext):
    phone = message.text
    telegram_user_id = message.from_user.id
    user_info = db_users.get_user_by_telegram_id(telegram_user_id)
    if len(phone) == 10 and phone.isnumeric():
        state_data=await state.get_data()
        surname=state_data["surname"]
        name=state_data["name"]
        db_users.update_user(
            name=name,
            surname=surname,
            lvl=None,
            phone=int(phone),
            telegram_user_id=telegram_user_id
        )                
        await message.answer("‚úÖ–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        await state.clear()
    else:
        await state.set_state(Form.phone)
        await message.answer("‚ùå–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä")

@dp.message(Command("start"))
async def start_func(message: types.Message, state: FSMContext):
    await message.answer("–í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ —É –±–æ—Ç—ñ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ—Å—å–∫–æ—óüá¨üáß")
    await message.answer("–©–æ–± –ø–æ—á–∞—Ç–∏ –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ —Å–≤–æ—î —ñ–º'—è")
    await state.set_state(Form.name)

@dp.message(Form.name)
async def name_func(message: types.Message, state: FSMContext):
    name = message.text
    if len(name) < 12  and len(name) >= 3 and name.isalpha():
        await message.answer(f"üôãHello {name}")
        await state.update_data(name=name)
        await state.set_state(Form.surname)
        await message.answer(f"{name}, –≤–≤–µ–¥–∏ —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ")
    else:
        await state.set_state(Form.name)
        await message.answer("‚ùå–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è")

@dp.message(Form.surname)
async def surname_func(message: types.Message, state: FSMContext):
    surname = message.text
    if len(surname) < 20  and surname.isalpha():
        await state.update_data(surname=surname)
        await state.set_state(Form.phone)
        await message.answer(f"‚òéÔ∏è–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É ,–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ +38")
    else:
        await state.set_state(Form.surname)
        await message.answer(f"‚ùå–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ")

@dp.message(Form.phone)
async def phone_func(message: types.Message, state: FSMContext):
    phone = message.text
    telegram_user_id = message.from_user.id
    if len(phone) == 10 and phone.isnumeric():
        await state.update_data(phone=phone)
        state_data=await state.get_data()
        name=state_data["name"]
        surname=state_data["surname"]
        db_users.register_user(
            name=name,
            surname=surname,
            telegram_user_id=telegram_user_id,
            phone=phone,
            lvl=None
        )
        await message.answer("‚úÖ–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        await message.answer("üìã–ê –∑–∞—Ä–∞–∑ –º–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∞–º –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç –Ω–∞ –≤–∞—à —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏")
        await state.update_data(score=0)
        await message.answer(f"1 –ü–∏—Ç–∞–Ω–Ω—è:")
        await message.answer(questions_start[1]["question"], reply_markup=dynamic_reply_kb(questions_start[1]["options"]))
        await state.set_state(ST.q2)
    else:
        await state.set_state(Form.phone)
        await message.answer("‚ùå–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä")

@dp.message(Command("learn"))
async def learn(message: types.Message):
    await message.answer(f"üìπ–û—Å—å —Ç–æ–±—ñ –∫–æ—Ä–∏—Å–Ω–µ –≤—ñ–¥–µ–æ:")
    await message.answer(f"{random.choice(links)}")
    await message.answer(f"üó£–õ–æ–≤–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ:")
    word = str(random.choice(english_words))
    await message.answer(f"{word}")
    await message.answer(f"üîÄ–ü–µ—Ä–µ–∫–ª–∞–¥:{eng(word)}")
    
@dp.message(Command("test"))
async def translate(message: types.Message, state: FSMContext):
    await message.answer("üöÄ–ü–æ—á–Ω–µ–º–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏ —Ç–µ—Å—Ç–∏!")
    await state.set_state(TC.ch)
    await state.update_data(score=0)
    await message.answer("üìö–û—Å—å –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ —Ç–µ—Å—Ç—ñ–≤",reply_markup=dynamic_reply_kb(eng_levels))

@dp.message(Command("howdoisay"))
async def translate(message: types.Message, state: FSMContext):
    await message.answer("‚ùì–ó —è–∫–æ—ó –º–æ–≤–∏ –±–∞–∂–∞—î—à –ø–µ—Ä–∫–ª–∞—Å—Ç–∏?",reply_markup=lang_kb)
    await state.set_state(transl.choose)

@dp.message(transl.choose)
async def choose(message: types.Message, state: FSMContext):
    if message.text=='–ó –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—óüá¨üáß':
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ —á–∏ —Ñ—Ä–∞–∑—É –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é —è–∫—É —Ö–æ—á–µ—à –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(transl.eng_answer)
    elif message.text=='–ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—óüá∫üá¶':
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ —á–∏ —Ñ—Ä–∞–∑—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é —è–∫—É —Ö–æ—á–µ—à –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(transl.ukr_answer)
        
@dp.message(transl.eng_answer)
async def translated_eng(message: types.Message, state: FSMContext):
    text = message.text
    answer = eng(text)
    await state.clear()
    await message.answer(f"‚úÖ–û—Å—å –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∞ —Ñ—Ä–∞–∑–∞/—Å–ª–æ–≤–æ: {answer}")
    
@dp.message(transl.ukr_answer)
async def translated_ukr(message: types.Message, state: FSMContext):
    text = message.text
    answer = ukr(text)
    await state.clear()
    await message.answer(f"‚úÖ–û—Å—å –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∞ —Ñ—Ä–∞–∑–∞/—Å–ª–æ–≤–æ: {answer}")

@dp.message(TC.ch)
async def main_handler(message: types.Message,state: TC):
    user_ans = message.text #A1
    if user_ans in eng_levels:
        await state.update_data(lvl=user_ans)
        await message.answer(f"üìã–¢–µ—Å—Ç –¥–ª—è —Ä—ñ–≤–Ω—è {user_ans}")
        await message.answer(f"1 –ü–∏—Ç–∞–Ω–Ω—è:")
        value = user_ans.lower() #a1
        if value in lvls:
            await message.answer(lvls[value][1]["question"], reply_markup=dynamic_reply_kb(lvls[value][1]["options"]))
        await state.set_state(AT.q2)
