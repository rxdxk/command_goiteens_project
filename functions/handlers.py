from aiogram import types,Router,F
from aiogram.filters.command import Command, CommandObject
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from .keyboards import *
from db_api.db_users import *
from loader import dp, R, db_users 

R = Router()

dp.include_router(R)

class Form(StatesGroup):
    name = State()
    surname = State()
    phone = State()

@R.message(Command("info"))
async def start_func(message: types.Message, state: FSMContext):
    await message.answer('''<b>–©–æ –º–æ–∂–µ —Ü–µ–π –±–æ—Ç?</b>
    <i>-–í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó
    -–î–æ–ø–æ–º–æ–≥—Ç–∏ –ø—Ä–æ–∫–∞—á–∞—Ç–∏ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è
    -–î–∞–≤–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –≤–∏–≤—á–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Å–ª—ñ–≤ —Ç–∞ –ø—Ä–∞–≤–∏–ª
    -–î–∞–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è
    -–î–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å —ñ–∑ –∫–æ—Ä–∏—Å—Ç—é</i>
                            ''')

@dp.message(F.text == "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è")
async def reg_func(message: types.Message):
    await message.answer("–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏ ?",reply_markup=types.ReplyKeyboardRemove())

@R.message(Command("start"))
async def start_func(message: types.Message, state: FSMContext):
    await message.answer("–í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ —É –±–æ—Ç—ñ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ—Å—å–∫–æ—óüá¨üáß")
    await message.answer("–©–æ–± –ø–æ—á–∞—Ç–∏ —Ç–æ–±—ñ —Ç—Ä–µ–±–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å(–Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É)üèÅ",reply_markup=reg_kb)
    await state.set_state(Form.name)

@R.message(Form.name)
async def name_func(message: types.Message, state: FSMContext):
    
    name = message.text

    if len(name) < 12 and name.isalpha():
        await message.answer(f"Hello {name}")
        await state.update_data(name=name)
        await state.set_state(Form.surname)
        await message.answer(f"{name}, –≤–≤–µ–¥–∏ —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ")

    else:
        await state.set_state(Form.name)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è")

@R.message(Form.surname)

async def surname_func(message: types.Message, state: FSMContext):
    surname = message.text

    if len(surname) < 20 and surname.isalpha():
        await state.update_data(surname=surname)
        await state.set_state(Form.phone)
        await message.answer(f"–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É ,–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ +38")
        
    else:
        await state.set_state(Form.surname)
        await message.answer(f"–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ")

@R.message(Form.phone)
async def phone_func(message: types.Message, state: FSMContext):
    phone = message.text

    if len(phone) == 10 and phone.isnumeric():
        await state.update_data(phone=phone)
        data  = await state.get_data()
        
        db_users.register_user(
            username=message.from_user.username,
            name=data.get("name"),
            surname=data.get("surname"),
            lvl=None,
            phone_number=data.get("phone"),
            telegram_user_id=message.from_user.id
        )

        await message.answer("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        await message.answer("–¢–∏ –≤–∂–µ –ø–æ—á–∞–≤ —Å–≤—ñ–π —Ä—É—Ö —ñ —Å–∫–æ—Ä–æ —Ç–∏ –±—É–¥–µ—à –≥–æ–≤–æ—Ä–∏—Ç–∏ –∞–Ω–≥–ª—ñ—Å—å–∫–æ—é —è–∫ –≤—ñ–Ω:")
        await message.answer("–ê –∑–∞—Ä–∞–∑ –º–∏ –ø—Ä–æ—É–Ω—É—î–º–æ –≤–∞–º –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç –Ω–∞ –≤–∞—à —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏")

    else:
        await state.set_state(Form.phone)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä")


